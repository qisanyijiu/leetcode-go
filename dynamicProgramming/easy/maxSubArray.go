package easy

/**
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:

输入: [-2,1,-3,4,-1,2,1,-5,4]
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。
 */
func MaxSubArray(nums []int) int {
	/**
	动态规划算法
	 */
	max := nums[0]
	for i := 1 ; i < len(nums); i ++ {
		if nums[i] + nums[i-1] > nums[i] {
			nums[i] += nums[i-1]
		}
		if nums[i] > max {
			max = nums[i]
		}
	}
	return max
}

/**
[-2,1,-3,4,-1,2,1,-5,4]

step-1:
max = -2
[-2,1,-3,4,-1,2,1,-5,4]

step-2:
max = 1
[-2,1,-3,4,-1,2,1,-5,4]

step-3:
max = 1
[-2,1,-2,4,-1,2,1,-5,4]

step-4:
max = 4
[-2,1,-2,4,-1,2,1,-5,4]

step-5:
max = 4
[-2,1,-3,4,3,2,1,-5,4]

step-6:
max = 5
[-2,1,-3,4,3,5,1,-5,4]

step-7:
max = 6
[-2,1,-3,4,3,5,6,-5,4]

step-8:
max = 6
[-2,1,-3,4,3,5,6,1,4]

step-9:
max = 6
[-2,1,-3,4,3,5,6,1,5]
 */